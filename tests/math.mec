Math Unit Tests
================

Scalar : Scalar
----------------

Test scalar math with f32
  #test += ["Add Scalar:Scalar f32"  2  1 + 1 
            "Sub Scalar:Scalar f32"  2  4 - 2
            "Div Scalar:Scalar f32"  2  4 / 2
            "Mul Scalar:Scalar f32"  6  2 * 3 
            "Exp Scalar:Scalar f32"  9  3 ^ 2]

Test scalar math with f64
  #test += ["Add Scalar:Scalar f64"  3<f64>  2<f64> + 1<f64> 
            "Sub Scalar:Scalar f64"  2<f64>  4<f64> - 2<f64>
            "Div Scalar:Scalar f64"  2<f64>  4<f64> / 2<f64>
            "Mul Scalar:Scalar f64"  6<f64>  2<f64> * 3<f64> 
            "Exp Scalar:Scalar f64"  9<f64>  3<f64> ^ 2<f64>]

Test scalar math with u16
  #test += ["Add Scalar:Scalar u16"  3<u16>  2<u16> + 1<u16> 
            "Sub Scalar:Scalar u16"  2<u16>  4<u16> - 2<u16>
            "Div Scalar:Scalar u16"  2<u16>  4<u16> / 2<u16>
            "Mul Scalar:Scalar u16"  6<u16>  2<u16> * 3<u16> 
            "Exp Scalar:Scalar u16"  9<u16>  3<u16> ^ 2<u16>]

Test scalar math with u32
  #test += ["Add Scalar:Scalar u32"  3<u32>  2<u32> + 1<u32> 
            "Sub Scalar:Scalar u32"  2<u32>  4<u32> - 2<u32>
            "Div Scalar:Scalar u32"  2<u32>  4<u32> / 2<u32>
            "Mul Scalar:Scalar u32"  6<u32>  2<u32> * 3<u32> 
            "Exp Scalar:Scalar u32"  9<u32>  3<u32> ^ 2<u32>]


Test scalar math with u64
  #test += ["Add Scalar:Scalar u32"  3<u64>  2<u64> + 1<u64>
            "Sub Scalar:Scalar u32"  2<u64>  4<u64> - 2<u64>
            "Div Scalar:Scalar u32"  2<u64>  4<u64> / 2<u64>
            "Mul Scalar:Scalar u32"  6<u64>  2<u64> * 3<u64> 
            "Exp Scalar:Scalar u32"  9<u64>  3<u64> ^ 2<u64>]

Scalar : Column
----------------
Test column math with u8
  x = [1<u8>; 2<u8>; 3<u8>]
  y = [4<u8>; 5<u8>; 6<u8>]
  sum-result = stats/sum(column: x + y)
  #test += ["Add Column:Column u8"  21<u8>  sum-result]

Test column math with u16
  x = [1<u16>; 2<u16>; 3<u16>]
  y = [4<u16>; 5<u16>; 6<u16>]
  sum-result = stats/sum(column: x + y)
  #test += ["Add Column:Column u16"  21<u16>  sum-result]

Test column math with u32
  x = [1<u32>; 2<u32>; 3<u32>]
  y = [4<u32>; 5<u32>; 6<u32>]
  sum-result = stats/sum(column: x + y)
  #test += ["Add Column:Column u32"  21<u32>  sum-result]

Test column math with u64
  x = [1<u64>; 2<u64>; 3<u64>]
  y = [4<u64>; 5<u64>; 6<u64>]
  sum-result = stats/sum(column: x + y)
  #test += ["Add Column:Column u64"  21<u64>  sum-result]

Test column math with f32
  x = [1<f32>; 2<f32>; 3<f32>]
  y = [4<f32>; 5<f32>; 6<f32>]
  sum-result = stats/sum(column: x + y)
  #test += ["Add Column:Column f32"  21<f32>  sum-result]

Test column math with f64
  x = [1<f64>; 2<f64>; 3<f64>]
  y = [4<f64>; 5<f64>; 6<f64>]
  sum-result = stats/sum(column: x + y)
  #test += ["Add Column:Column f64"  21<f64>  sum-result]
  

Column : Column
----------------

Test column math with u8
  y = [4<u8> 5<u8> 6<u8>]
  sum-result = stats/sum(row: 4<u8> + y)
  mul-result = stats/sum(row: 4<u8> * y)
  #test += ["Add Column:Column u8"  27<u8>  sum-result
            "Mul Column:Column u8"  60<u8>  mul-result]

Test column math with u16
  y = [4<u16> 5<u16> 6<u16>]
  sum-result = stats/sum(row: 4<u16> + y)
  mul-result = stats/sum(row: 4<u16> * y)
  #test += ["Add Scalar:Row u16"  27<u16>  sum-result
            "Mul Scalar:Row u16"  60<u16>  mul-result]

Test column math with u32
  y = [4<u32> 5<u32> 6<u32>]
  sum-result = stats/sum(row: 4<u32> + y)
  mul-result = stats/sum(row: 4<u32> * y)
  #test += ["Add Scalar:Row u32"  27<u32>  sum-result
            "Mul Scalar:Row u32"  60<u32>  mul-result]

Test column math with u64
  x = [1<u64>; 2<u64>; 3<u64>]
  y = [4<u64>; 5<u64>; 6<u64>]
  sum-result = stats/sum(column: x + y)
  mul-result = stats/sum(column: x * y)
  #test += ["Add Column:Column u64"  21<u64>  sum-result
            "Mul Column:Column u64"  32<u64>  mul-result]

Test column math with f32
  x = [1<f32>; 2<f32>; 3<f32>]
  y = [4<f32>; 5<f32>; 6<f32>]
  sum-result = stats/sum(column: x + y)
  mul-result = stats/sum(column: x * y)
  #test += ["Add Column:Column f32"  21<f32>  sum-result
            "Mul Column:Column f32"  32<f32>  mul-result]

Test column math with f64
  x = [1<f64>; 2<f64>; 3<f64>]
  y = [4<f64>; 5<f64>; 6<f64>]
  sum-result = stats/sum(column: x + y)
  mul-result = stats/sum(column: x * y)
  #test += ["Add Column:Column f64"  21<f64>  sum-result
            "Mul Column:Column f64"  32<f64>  mul-result]


